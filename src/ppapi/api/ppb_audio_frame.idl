/* Copyright 2014 The Chromium Authors. All rights reserved.
 * Use of this source code is governed by a BSD-style license that can be
 * found in the LICENSE file.
 */

/**
 * Defines the <code>PPB_AudioFrame</code> interface.
 */

[generate_thunk]

label Chrome {
  [channel=dev] M34 = 0.1
};

/**
 * PP_AudioFrame_SampleRate is an enumeration of the different audio sample
 * rates.
 */
enum PP_AudioFrame_SampleRate {
  PP_AUDIOFRAME_SAMPLERATE_UNKNOWN = 0,
  PP_AUDIOFRAME_SAMPLERATE_44100 = 44100
};

/**
 * PP_AudioFrame_SampleSize is an enumeration of the different audio sample
 * sizes.
 */
enum PP_AudioFrame_SampleSize {
  PP_AUDIOFRAME_SAMPLESIZE_UNKNOWN = 0,
  PP_AUDIOFRAME_SAMPLESIZE_16_BITS = 2
};

interface PPB_AudioFrame {
  /**
   * Determines if a resource is an AudioFrame resource.
   *
   * @param[in] resource The <code>PP_Resource</code> to test.
   *
   * @return A <code>PP_Bool</code> with <code>PP_TRUE</code> if the given
   * resource is an AudioFrame resource or <code>PP_FALSE</code> otherwise.
   */
  PP_Bool IsAudioFrame([in] PP_Resource resource);

  /**
   * Gets the timestamp of the audio frame.
   *
   * @param[in] frame A <code>PP_Resource</code> corresponding to an audio frame
   * resource.
   *
   * @return A <code>PP_TimeDelta</code> containing the timestamp of the audio
   * frame. Given in seconds since the start of the containing audio stream.
   */
  [on_failure=0.0]
  PP_TimeDelta GetTimestamp([in] PP_Resource frame);

  /**
   * Sets the timestamp of the audio frame.
   *
   * @param[in] frame A <code>PP_Resource</code> corresponding to an audio frame
   * resource.
   * @param[in] timestamp A <code>PP_TimeDelta</code> containing the timestamp
   * of the audio frame. Given in seconds since the start of the containing
   * audio stream.
   */
  void SetTimestamp([in] PP_Resource frame, [in] PP_TimeDelta timestamp);

  /**
   * Gets the sample size of the audio frame.
   *
   * @param[in] frame A <code>PP_Resource</code> corresponding to an audio frame
   * resource.
   *
   * @return The sample size of the audio frame.
   */
  [on_failure=PP_AUDIOFRAME_SAMPLESIZE_UNKNOWN]
  PP_AudioFrame_SampleSize GetSampleSize([in] PP_Resource frame);
  
  /**
   * Gets the number of channels in the audio frame.
   *
   * @param[in] frame A <code>PP_Resource</code> corresponding to an audio frame
   * resource.
   *
   * @return The number of channels in the audio frame.
   */
  uint32_t GetNumberOfChannels([in] PP_Resource frame);

  /**
   * Gets the number of samples in the audio frame.
   *
   * @param[in] frame A <code>PP_Resource</code> corresponding to an audio frame
   * resource.
   *
   * @return The number of samples in the audio frame.
   * For example, at a sampling rate of 44,100 Hz in stereo audio, a frame
   * containing 4410 * 2 samples would have a duration of 100 milliseconds.
   */
  uint32_t GetNumberOfSamples([in] PP_Resource frame);

  /**
   * Gets the data buffer containing the audio frame samples.
   *
   * @param[in] frame A <code>PP_Resource</code> corresponding to an audio frame
   * resource.
   *
   * @return A pointer to the beginning of the data buffer.
   */
  mem_t GetDataBuffer([in] PP_Resource frame);

  /**
   * Gets the size of the data buffer in bytes.
   *
   * @param[in] frame A <code>PP_Resource</code> corresponding to an audio frame
   * resource.
   *
   * @return The size of the data buffer in bytes.
   */
  uint32_t GetDataBufferSize([in] PP_Resource frame);
};
