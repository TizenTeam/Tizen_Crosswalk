From 0f1ef3ae545925201c9ac47082efc62074e50bc9 Mon Sep 17 00:00:00 2001
From: Kondapally Kalyan <kalyan.kondapally@intel.com>
Date: Sat, 15 Feb 2014 17:41:42 +0200
Subject: [PATCH] Backport Chromium r248929 to M34.

This patch adapts the fixes done in r248929 to M34 code base. This CL
fixes shared component builds with Ozone.

Effecting CLs:
https://codereview.chromium.org/151513005/
---
 chrome/browser/fullscreen_aura.cc    |   19 ++++++
 chrome/browser/fullscreen_aurawin.cc |   19 ------
 chrome/browser/fullscreen_aurax11.cc |  123 ----------------------------------
 chrome/chrome_browser.gypi           |    4 +-
 ui/base/x/x11_util.h                 |    2 +-
 5 files changed, 21 insertions(+), 146 deletions(-)
 create mode 100644 chrome/browser/fullscreen_aura.cc
 delete mode 100644 chrome/browser/fullscreen_aurawin.cc
 delete mode 100644 chrome/browser/fullscreen_aurax11.cc

diff --git a/chrome/browser/fullscreen_aura.cc b/chrome/browser/fullscreen_aura.cc
new file mode 100644
index 0000000..db768be
--- /dev/null
+++ b/chrome/browser/fullscreen_aura.cc
@@ -0,0 +1,19 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/browser/fullscreen.h"
+
+#include "base/logging.h"
+
+#if !defined(USE_ASH)
+
+bool IsFullScreenMode() {
+  // TODO(erg): An implementation here would have to check all existing
+  // RootWindows instead of just recursively walking the Shell's RootWindow as
+  // in the ash implementaiton.
+  NOTIMPLEMENTED();
+  return false;
+}
+
+#endif
diff --git a/chrome/browser/fullscreen_aurawin.cc b/chrome/browser/fullscreen_aurawin.cc
deleted file mode 100644
index d6a8294..0000000
--- a/chrome/browser/fullscreen_aurawin.cc
+++ /dev/null
@@ -1,19 +0,0 @@
-// Copyright 2014 The Chromium Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "chrome/browser/fullscreen.h"
-
-#include "base/logging.h"
-
-#if !defined(USE_ASH)
-
-bool IsFullScreenMode() {
-  // TODO(erg): An implementation here would have to check all existing
-  // RootWindows instead of just recursively walking the Shell's RootWindow as
-  // in the ash implementaiton.
-  NOTIMPLEMENTED();
-  return false;
-}
-
-#endif
diff --git a/chrome/browser/fullscreen_aurax11.cc b/chrome/browser/fullscreen_aurax11.cc
deleted file mode 100644
index 46ff522..0000000
--- a/chrome/browser/fullscreen_aurax11.cc
+++ /dev/null
@@ -1,123 +0,0 @@
-// Copyright 2014 The Chromium Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "chrome/browser/fullscreen.h"
-
-#include <X11/Xlib.h>
-#include "base/basictypes.h"
-#include "base/logging.h"
-#include "ui/base/x/x11_util.h"
-#include "ui/gfx/rect.h"
-
-namespace {
-
-void EnumerateAllChildWindows(ui::EnumerateWindowsDelegate* delegate,
-                              XID window) {
-  std::vector<XID> windows;
-
-  if (!ui::GetXWindowStack(window, &windows)) {
-    // Window Manager doesn't support _NET_CLIENT_LIST_STACKING, so fall back
-    // to old school enumeration of all X windows.
-    XID root, parent, *children;
-    unsigned int num_children;
-    int status = XQueryTree(gfx::GetXDisplay(), window, &root, &parent,
-                            &children, &num_children);
-    if (status) {
-      for (long i = static_cast<long>(num_children) - 1; i >= 0; i--)
-        windows.push_back(children[i]);
-      XFree(children);
-    }
-  }
-
-  std::vector<XID>::iterator iter;
-  for (iter = windows.begin(); iter != windows.end(); iter++) {
-    if (delegate->ShouldStopIterating(*iter))
-      return;
-  }
-}
-
-// To find the top-most window:
-// 1) Enumerate all top-level windows from the top to the bottom.
-// 2) For each window:
-//    2.1) If it is hidden, continue the iteration.
-//    2.2) If it is managed by the Window Manager (has a WM_STATE property).
-//         Return this window as the top-most window.
-//    2.3) Enumerate all its child windows. If there is a child window that is
-//         managed by the Window Manager (has a WM_STATE property). Return this
-//         child window as the top-most window.
-//    2.4) Otherwise, continue the iteration.
-
-class WindowManagerWindowFinder : public ui::EnumerateWindowsDelegate {
- public:
-  WindowManagerWindowFinder() : window_(None) { }
-
-  XID window() const { return window_; }
-
- protected:
-  virtual bool ShouldStopIterating(XID window) OVERRIDE {
-    if (ui::PropertyExists(window, "WM_STATE")) {
-      window_ = window;
-      return true;
-    }
-    return false;
-  }
-
- private:
-  XID window_;
-
-  DISALLOW_COPY_AND_ASSIGN(WindowManagerWindowFinder);
-};
-
-class TopMostWindowFinder : public ui::EnumerateWindowsDelegate {
- public:
-  TopMostWindowFinder()
-      : top_most_window_(None) {}
-
-  XID top_most_window() const { return top_most_window_; }
-
- protected:
-  virtual bool ShouldStopIterating(XID window) OVERRIDE {
-     if (!ui::IsWindowVisible(window))
-       return false;
-     if (ui::PropertyExists(window, "WM_STATE")) {
-      top_most_window_ = window;
-      return true;
-     }
-
-     WindowManagerWindowFinder child_finder;
-     EnumerateAllChildWindows(&child_finder, window);
-     XID child_window = child_finder.window();
-     if (child_window == None)
-       return false;
-     top_most_window_ = child_window;
-     return true;
-  }
-
- private:
-  XID top_most_window_;
-
-  DISALLOW_COPY_AND_ASSIGN(TopMostWindowFinder);
-};
-
-bool IsTopMostWindowFullScreen() {
-  // Find the topmost window
-  TopMostWindowFinder finder;
-  EnumerateAllChildWindows(&finder, ui::GetX11RootWindow());
-  XID window = finder.top_most_window();
-  if (window == None)
-    return false;
-
-  // Make sure it is not the desktop window.
-  int window_desktop;
-  if (!ui::GetWindowDesktop(window, &window_desktop))
-    return false;
-
-  return ui::IsX11WindowFullScreen(window);
-}
-
-}  // namespace
-
-bool IsFullScreenMode() {
-  return IsTopMostWindowFullScreen();
-}
diff --git a/chrome/chrome_browser.gypi b/chrome/chrome_browser.gypi
index 087e42d..1f457e1 100644
--- a/chrome/chrome_browser.gypi
+++ b/chrome/chrome_browser.gypi
@@ -676,8 +676,7 @@
         'browser/first_run/upgrade_util_win.h',
         'browser/flags_storage.h',
         'browser/fullscreen.h',
-        'browser/fullscreen_aurax11.cc',
-        'browser/fullscreen_aurawin.cc',
+        'browser/fullscreen_aura.cc',
         'browser/fullscreen_chromeos.cc',
         'browser/fullscreen_gtk.cc',
         'browser/fullscreen_mac.mm',
@@ -2980,7 +2979,6 @@
             'browser/first_run/upgrade_util.cc',
             'browser/first_run/upgrade_util.h',
             'browser/first_run/upgrade_util_linux.cc',
-            'browser/fullscreen_aurax11.cc',
             'browser/icon_loader_auralinux.cc',
             'browser/icon_loader_linux.cc',
             'browser/icon_manager_linux.cc',
diff --git a/ui/base/x/x11_util.h b/ui/base/x/x11_util.h
index ac71b68..92ad3f0 100644
--- a/ui/base/x/x11_util.h
+++ b/ui/base/x/x11_util.h
@@ -227,7 +227,7 @@ XID GetHighestAncestorWindow(XID window, XID root);
 static const int kAllDesktops = -1;
 // Queries the desktop |window| is on, kAllDesktops if sticky. Returns false if
 // property not found.
-UI_BASE_EXPORT bool GetWindowDesktop(XID window, int* desktop);
+bool GetWindowDesktop(XID window, int* desktop);

 // Translates an X11 error code into a printable string.
 UI_BASE_EXPORT std::string GetX11ErrorString(XDisplay* display, int err);
--
1.7.9.5
